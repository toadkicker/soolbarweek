require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe EventsController, type: :controller do
  include Devise::Test::ControllerHelpers

  let(:user) {FactoryGirl.create :user}
  let(:admin_user) {FactoryGirl.create :user, is_admin: true}
  let(:location) {FactoryGirl.create :location}
  let(:profile) {FactoryGirl.create :profile}
  let(:event) {FactoryGirl.create :event, profile: profile, location: location}

  def signin
    @request.env['devise.mapping'] = Devise.mappings[:user]
    sign_in admin_user
  end

  describe 'GET #index' do
    it 'returns a success response' do
      get :index
      expect(response).to be_success
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      get :show, params: {id: event.id}
      expect(response).to be_success
    end
  end

  describe 'POST #create' do
    before(:each) {signin}

    context 'with valid params' do
      let(:event) {FactoryGirl.attributes_for(:event, profile_id: profile.id, location_id: location.id)}
      it 'creates a new Event' do
        expect do
          post :create, params: {event: event}
        end.to change(Event, :count).by(1)
      end
    end

    context 'with invalid params' do
      let(:event) {FactoryGirl.create(:event, profile_id: profile.id, location_id: location.id)}
      let(:attributes) {{max_seats: 'inconceivable'}}

      it "returns a success response (i.e. to display the 'new' template)" do
        event.max_seats = 'sdlfndlskf'
        post :create, params: {id: event.id, event: attributes}
        expect(response).to render_template(:new)
      end
    end
  end

  describe 'PUT #update' do
    before(:each) {signin}

    context 'with valid params' do
      let(:new_attributes) do
        FactoryGirl.attributes_for(:event, street_address1: '3078 C Street')
      end

      it 'updates the requested event' do
        put :update, params: {id: event.id, event: new_attributes}
        event.reload
        expect {event.address.to eq '3078 C Street'}
      end
    end

  end

  describe 'DELETE #destroy' do
    before(:each) {signin}
    let(:event) {FactoryGirl.create :event, profile: profile, location: location}

    it 'destroys the requested event' do
      delete :destroy, params: {id: event.id}
      expect(Event.all).not_to include(event)
    end
  end
end
